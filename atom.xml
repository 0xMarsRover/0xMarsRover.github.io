<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://0xMarsRover.github.io</id>
    <title>Mars Rover</title>
    <updated>2024-06-07T13:05:08.025Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://0xMarsRover.github.io"/>
    <link rel="self" href="https://0xMarsRover.github.io/atom.xml"/>
    <subtitle>Web3 is all you need</subtitle>
    <logo>https://0xMarsRover.github.io/images/avatar.png</logo>
    <icon>https://0xMarsRover.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, Mars Rover</rights>
    <entry>
        <title type="html"><![CDATA[Get All Tokens by a Wallet in Solana]]></title>
        <id>https://0xMarsRover.github.io/post/get-all-tokens-by-a-wallet-in-solana/</id>
        <link href="https://0xMarsRover.github.io/post/get-all-tokens-by-a-wallet-in-solana/">
        </link>
        <updated>2024-06-07T05:54:44.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-typescript">
import { Connection, GetProgramAccountsFilter } from &quot;@solana/web3.js&quot;;
import { TOKEN_PROGRAM_ID } from &quot;@solana/spl-token&quot;;

const rpcEndpoint = 'YOUR_PRC_ENDPOINT';
const solanaConnection = new Connection(rpcEndpoint);

const walletToQuery = 'YOUR_PUBLIC_KEY'; 

async function getTokenAccounts(wallet: string, solanaConnection: Connection) {
    const filters:GetProgramAccountsFilter[] = [
        {
          dataSize: 165,    //size of account (bytes)
        },
        {
          memcmp: {
            offset: 32,     //location of our query in the account (bytes)
            bytes: wallet,  //our search criteria, a base58 encoded string
          },            
        }];
    const accounts = await solanaConnection.getParsedProgramAccounts(
        TOKEN_PROGRAM_ID, //new PublicKey(&quot;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&quot;)
        {filters: filters}
    );
    console.log(`Found ${accounts.length} token account(s) for wallet ${wallet}.`);
    accounts.forEach((account, i) =&gt; {
        //Parse the account data
        const parsedAccountInfo:any = account.account.data;
        const mintAddress:string = parsedAccountInfo[&quot;parsed&quot;][&quot;info&quot;][&quot;mint&quot;];
        const tokenBalance: number = parsedAccountInfo[&quot;parsed&quot;][&quot;info&quot;][&quot;tokenAmount&quot;][&quot;uiAmount&quot;];
        //Log results
        console.log(`Token Account No. ${i + 1}: ${account.pubkey.toString()}`);
        console.log(`--Token Mint: ${mintAddress}`);
        console.log(`--Token Balance: ${tokenBalance}`);
    });
}
getTokenAccounts(walletToQuery,solanaConnection);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Burn SPL Token on Solana]]></title>
        <id>https://0xMarsRover.github.io/post/burn-spl-token-on-solana/</id>
        <link href="https://0xMarsRover.github.io/post/burn-spl-token-on-solana/">
        </link>
        <updated>2024-06-07T05:49:40.000Z</updated>
        <content type="html"><![CDATA[<p>Burn SPL token using Typescript</p>
<pre><code class="language-typescript">const MINT_ADDRESS = 'Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr'; // USDC-Dev from spl-token-faucet.com | replace with the mint you would like to burn
const MINT_DECIMALS = 6; // Value for USDC-Dev from spl-token-faucet.com | replace with the no. decimals of mint you would like to burn
const BURN_QUANTITY = 1; // Number of tokens to burn (feel free to replace with any number - just make sure you have enough)

(async () =&gt; {
    console.log(`Attempting to burn ${BURN_QUANTITY} [${MINT_ADDRESS}] tokens from Owner Wallet: ${WALLET.publicKey.toString()}`);
        // Step 1 - Fetch Associated Token Account Address
    console.log(`Step 1 - Fetch Token Account`);
    const account = await getAssociatedTokenAddress(new PublicKey(MINT_ADDRESS), WALLET.publicKey);
    console.log(`    ‚úÖ - Associated Token Account Address: ${account.toString()}`);

        // Step 2 - Create Burn Instructions
    console.log(`Step 2 - Create Burn Instructions`);
    const burnIx = createBurnCheckedInstruction(
      account, // PublicKey of Owner's Associated Token Account
      new PublicKey(MINT_ADDRESS), // Public Key of the Token Mint Address
      WALLET.publicKey, // Public Key of Owner's Wallet
      BURN_QUANTITY * (10**MINT_DECIMALS), // Number of tokens to burn
      MINT_DECIMALS // Number of Decimals of the Token Mint
    );
    console.log(`    ‚úÖ - Burn Instruction Created`);

        // Step 3 - Fetch Blockhash
    console.log(`Step 3 - Fetch Blockhash`);
    const { blockhash, lastValidBlockHeight } = await SOLANA_CONNECTION.getLatestBlockhash('finalized');
    console.log(`    ‚úÖ - Latest Blockhash: ${blockhash}`);

        // Step 4 - Assemble Transaction
    console.log(`Step 4 - Assemble Transaction`);
    const messageV0 = new TransactionMessage({
      payerKey: WALLET.publicKey,
      recentBlockhash: blockhash,
      instructions: [burnIx]
    }).compileToV0Message();
    const transaction = new VersionedTransaction(messageV0);
    transaction.sign([WALLET]);
    console.log(`    ‚úÖ - Transaction Created and Signed`);

        // Step 5 - Execute &amp; Confirm Transaction 
    console.log(`Step 5 - Execute &amp; Confirm Transaction`);
    const txid = await SOLANA_CONNECTION.sendTransaction(transaction);
    console.log(&quot;    ‚úÖ - Transaction sent to network&quot;);
    const confirmation = await SOLANA_CONNECTION.confirmTransaction({
        signature: txid,
        blockhash: blockhash,
        lastValidBlockHeight: lastValidBlockHeight
    });
    if (confirmation.value.err) { throw new Error(&quot;    ‚ùå - Transaction not confirmed.&quot;) }
    console.log('üî• SUCCESSFUL BURN!üî•', '\n', `https://explorer.solana.com/tx/${txid}?cluster=devnet`);

})()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Swap on Raydium using Typescript]]></title>
        <id>https://0xMarsRover.github.io/post/swap-on-raydium-using-typescript/</id>
        <link href="https://0xMarsRover.github.io/post/swap-on-raydium-using-typescript/">
        </link>
        <updated>2024-06-06T22:46:05.000Z</updated>
        <content type="html"><![CDATA[<p>Key functions to swap tokens on Radydium.</p>
<pre><code class="language-typescript">type TxInputInfo = {
  outputToken: Token;
  targetPool: string;
  inputTokenAmount: TokenAmount;
  slippage: Percent;
  walletTokenAccounts: WalletTokenAccounts;
  wallet: Keypair;
};

async function swapOnlyAmm(
  connection: Connection,
  signer: Keypair,
  input: TxInputInfo
) {
  try {
    // -------- pre-action: get pool info --------
    const targetPoolInfo = await formatAmmKeysById(
      connection,
      input.targetPool
    );
    const poolKeys = jsonInfo2PoolKeys(targetPoolInfo) as LiquidityPoolKeys;
    const makeTxVersion = TxVersion.LEGACY;
    // -------- step 1: coumpute amount out --------
    const { amountOut, minAmountOut } = Liquidity.computeAmountOut({
      poolKeys: poolKeys,
      poolInfo: await Liquidity.fetchInfo({ connection, poolKeys }),
      amountIn: input.inputTokenAmount,
      currencyOut: input.outputToken,
      slippage: input.slippage,
    });

    // -------- step 2: create instructions by SDK function --------
    const { innerTransactions } = await Liquidity.makeSwapInstructionSimple({
      connection,
      poolKeys,
      userKeys: {
        tokenAccounts: input.walletTokenAccounts,
        owner: input.wallet.publicKey,
        payer: input.wallet.publicKey,
      },
      amountIn: input.inputTokenAmount,
      amountOut: minAmountOut,
      fixedSide: &quot;in&quot;,
      makeTxVersion,
      config: {
        bypassAssociatedCheck: false,
      },
      computeBudgetConfig: {
        units: 1_000_000,
        microLamports: 50_000,
      },
    });
    generalRaydiumLogger.info(`Amount-Out: ${amountOut.toFixed()}`);
    generalRaydiumLogger.info(`Minimal Amount-Out: ${minAmountOut.toFixed()}`);

    return {
      txids: await buildAndSendTx(
        connection,
        makeTxVersion,
        signer,
        innerTransactions,
        {
          skipPreflight: false,
          preflightCommitment: &quot;confirmed&quot;,
        }
      ),
    };
  } catch (error: any) {
    generalRaydiumLogger.error(`Transaction Failed: ${error?.message}`);
    return;
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TradingView - DMI]]></title>
        <id>https://0xMarsRover.github.io/post/tradingview-dmi/</id>
        <link href="https://0xMarsRover.github.io/post/tradingview-dmi/">
        </link>
        <updated>2024-06-06T22:20:15.000Z</updated>
        <content type="html"><![CDATA[<p>DMI with EMA/SMA<br>
BTCUSDT-3H<br>
<img src="https://0xMarsRover.github.io/post-images/1717762915548.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TradingView - Triple SMA]]></title>
        <id>https://0xMarsRover.github.io/post/triple-sma/</id>
        <link href="https://0xMarsRover.github.io/post/triple-sma/">
        </link>
        <updated>2024-06-05T14:27:09.000Z</updated>
        <content type="html"><![CDATA[<p>Three SMA with Kaufman Adaptive MA<br>
BTCUSDT-4H<br>
<img src="https://0xMarsRover.github.io/post-images/1717761671764.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>